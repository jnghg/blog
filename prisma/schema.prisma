generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?
  emailVerified      DateTime? @map("email_verified")
  image              String?
  device             String?
  etcDevice          String?
  isPlannedSubscribe Boolean?
  phone              String?
  purpose            String?
  redirectUri        String?
  sessions           Session[]
  accounts           Account[]
  apiToken           ApiToken?

  @@unique([email])
}

model ApiToken {
  id           String @id @default(cuid())
  clientId     String
  clientSecret String
  userEmail    String
  user         User   @relation(fields: [userEmail], references: [email])

  @@unique([userEmail])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
